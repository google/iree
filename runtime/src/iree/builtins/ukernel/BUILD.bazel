# Copyright 2022 The IREE Authors
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

load("//build_tools/bazel:build_defs.oss.bzl", "iree_cmake_extra_content", "iree_runtime_cc_library")
load("//build_tools/bazel:iree_bitcode_library.bzl", "iree_bitcode_library")
load("//build_tools/embed_data:build_defs.bzl", "c_embed_data")

package(
    default_visibility = ["//visibility:public"],
    features = ["layering_check"],
    licenses = ["notice"],  # Apache 2.0
)

iree_runtime_cc_library(
    name = "static_assert",
    hdrs = ["static_assert.h"],
)

iree_runtime_cc_library(
    name = "exported_bits",
    hdrs = ["exported_bits.h"],
    deps = [":static_assert"],
)

internal_headers = [
    "common.h",
    "elementwise.h",
    "mmt4d.h",
    "mmt4d_internal.h",
    "pack.h",
    "pack_internal.h",
    "query_tile_sizes.h",
    "query_tile_sizes_internal.h",
    "unpack.h",
    "unpack_internal.h",
]

iree_runtime_cc_library(
    name = "internal_headers",
    hdrs = internal_headers,
    visibility = [":__subpackages__"],
    deps = [
        ":exported_bits",
        ":static_assert",
        "//runtime/src/iree/base:core_headers",
    ],
)

# Entry points.
iree_runtime_cc_library(
    name = "ukernel_noweak",
    srcs = [
        "elementwise.c",
        "mmt4d.c",
        "mmt4d_tile.c",
        "pack.c",
        "pack_tile.c",
        "query_tile_sizes.c",
        "unpack.c",
        "unpack_tile.c",
    ] + internal_headers,
    hdrs = ["api.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":exported_bits",
        ":static_assert",
        "//runtime/src/iree/base:core_headers",
        "//runtime/src/iree/builtins/ukernel/arch:ukernel_arch",
    ],
)

iree_runtime_cc_library(
    name = "zzz_weak_linklast",
    srcs = ["weak.c"],
    visibility = ["//visibility:private"],
    deps = [":internal_headers"],
)

iree_runtime_cc_library(
    name = "ukernel",
    hdrs = ["api.h"],
    deps = [
        ":ukernel_noweak",
        ":zzz_weak_linklast",
    ],
)

#===------------------------------------------------------------------------===#
# UKernel bitcode files
#===------------------------------------------------------------------------===#

iree_cmake_extra_content(
    content = """
if(IREE_BUILD_COMPILER AND IREE_TARGET_BACKEND_LLVM_CPU)
""",
    inline = True,
)

UKERNEL_BASE_SRCS = [
    "mmt4d.c",
    "mmt4d_tile.c",
    "pack.c",
    "pack_tile.c",
    "query_tile_sizes.c",
    "unpack_tile.c",
    "weak.c",
]

filegroup(
    name = "bitcode_internal_headers",
    srcs = internal_headers + [
        "exported_bits.h",
        "static_assert.h",
        "//runtime/src/iree/schemas:cpu_data.h",
        "//runtime/src/iree/schemas:cpu_feature_bits.inl",
    ],
)

iree_bitcode_library(
    name = "ukernel_bitcode_base",
    srcs = UKERNEL_BASE_SRCS,
    internal_hdrs = [
        ":bitcode_internal_headers",
        "//runtime/src/iree/builtins/ukernel/arch/x86_64:bitcode_internal_headers",
    ],
)

c_embed_data(
    name = "embed_ukernel_bitcode",
    srcs = [
        ":ukernel_bitcode_base.bc",
        "//runtime/src/iree/builtins/ukernel/arch/x86_64:ukernel_bitcode_x86_64.bc",
    ],
    c_file_output = "ukernel_bitcode.c",
    flatten = True,
    h_file_output = "ukernel_bitcode.h",
    identifier = "iree_ukernel_bitcode",
    deps = [
        "//runtime/src:runtime_defines",
    ],
)

iree_cmake_extra_content(
    content = """
endif()  # IREE_BUILD_COMPILER AND IREE_TARGET_BACKEND_LLVM_CPU
""",
    inline = True,
)
