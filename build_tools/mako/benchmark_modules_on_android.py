#!/usr/bin/env python3
# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Benchmarks modules generated by compile_modules.sh on Android and writes
# performance data to a text proto file, mako-phone-mako_tag-git_hash.
#
# The script benchmarks modules on 7-th big core, ie, run with `taskset 80`.

import argparse
import datetime
import subprocess
import os
import re

import utils

PATTERN = re.compile(r"BM_(\w+)(.+)/real_time(\s+) (?P<ms>[.0-9]+) ms")
DEVICE_ROOT = "/data/local/tmp/benchmark_tmpdir"


def parse_arguments():
  parser = argparse.ArgumentParser()
  parser.add_argument("--git_hash", default="UNKNOWN")
  parser.add_argument("phone")
  args = parser.parse_args()
  return args


def get_mako_sample(value, tag):
  return """
samples: {{
  time: {}
  target: "{}"
}}""".format(value, tag).strip()


def get_mako_metadata(git_hash, timestamp, benchmark_key):
  return """
metadata: {{
  git_hash: "{}"
  timestamp_ms: {}
  benchmark_key: "{}"
}}
""".format(git_hash, timestamp, benchmark_key).strip()


def benchmark(module_name, flagfile_name, target):
  samples = []
  driver = target.get_driver()
  cmd = [
      "adb", "shell", "LD_LIBRARY_PATH=/data/local/tmp", "taskset", "80",
      "{}/iree-benchmark-module".format(DEVICE_ROOT), "--flagfile={}/{}".format(
          DEVICE_ROOT, flagfile_name), "--module_file={}/{}".format(
              DEVICE_ROOT, module_name), "--driver={}".format(driver),
      "--benchmark_repetitions=3"
  ] + target.runtime_flags
  print("Run cmd: {}".format(" ".join(cmd)))
  try:
    output = subprocess.run(cmd, check=True,
                            capture_output=True).stdout.strip().decode()
    for line in output.split("\n"):
      m = PATTERN.match(line)
      if m is not None:
        samples.append(get_mako_sample(m.group("ms"), target.mako_tag))
    return "\n".join(samples)
  except subprocess.CalledProcessError as e:
    print(e)
    exit(1)


def main(args) -> None:
  timestamp = int(datetime.datetime.now().timestamp() * 1000)
  for model_benchmark in utils.MODEL_BENCHMARKS:
    for phone in model_benchmark.phones:
      mako_log = []
      if phone.name != args.phone:
        continue
      for target in phone.targets:
        module_name = utils.get_module_name(model_benchmark.name, phone.name,
                                            target.mako_tag)
        flagfile_name = "{}_flagfile".format(model_benchmark.name)
        mako_log.append(benchmark(module_name, flagfile_name, target))
      mako_log.append(
          get_mako_metadata(args.git_hash, timestamp, phone.benchmark_key))
      mako_log = "\n".join(mako_log)
      filename = "mako-{}-{}-{}.log".format(model_benchmark.name, phone.name,
                                            args.git_hash)
      open(filename, "w").write(mako_log)
      print(log)


if __name__ == "__main__":
  main(parse_arguments())
