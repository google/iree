module {

flow.variable @"var1" dense<1.000000e+00> : tensor<4xf32>
flow.variable @"var2" dense<2.000000e+00> : tensor<4xf32>
func @elementwiseOps() -> tensor<4xf32> {
  %cst = constant 4 : index
  %arg0 = flow.variable.load @"var1" : tensor<4xf32>
  %arg1 = flow.variable.load @"var2" : tensor<4xf32>
  %0 = flow.dispatch.region[%cst : index](%arg2 = %arg0 : tensor<4xf32>) -> tensor<4xf32> {
    %1 = mhlo.add %arg2, %arg2 : tensor<4xf32>
    flow.return %1 : tensor<4xf32>
  }
  %2 = flow.dispatch.region[%cst : index](%arg2 = %arg0 : tensor<4xf32>, %arg3 = %arg1 : tensor<4xf32>) -> tensor<4xf32> {
    %3 = mhlo.subtract %arg3, %arg2 : tensor<4xf32>
    flow.return %3 : tensor<4xf32>
  }
  return %2 : tensor<4xf32>
}
}
