################################################################################
# Autogenerated by build_tools/bazel_to_cmake/bazel_to_cmake.py from           #
# compiler/src/iree/compiler/API2/test/BUILD                                   #
#                                                                              #
# Use iree_cmake_extra_content from iree/build_defs.oss.bzl to add arbitrary   #
# CMake-only content.                                                          #
#                                                                              #
# To disable autogeneration for this file entirely, delete this header.        #
################################################################################

iree_add_all_subdirs()

iree_cc_test(
  NAME
    api-test-binary
  SRCS
    "api-test-main.c"
  DEPS
    IREELLVMIncludeSetup
    iree::base
    iree::compiler::API2::Impl
    iree::compiler::API2::MLIRInteropHeaders
    iree::compiler::bindings::c::headers
)

### BAZEL_TO_CMAKE_PRESERVES_ALL_CONTENT_BELOW_THIS_LINE ###

# Move to bin/ directory and systematically name more appropriately.
# See: https://github.com/openxla/iree/issues/11297
if(TARGET iree_compiler_API2_test_api-test-binary)
  set_target_properties(iree_compiler_API2_test_api-test-binary
    PROPERTIES
    OUTPUT_NAME "test-iree-compiler-api-test-binary"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/tools"
  )

  if(BUILD_SHARED_LIBS)
    # When the compiler/LLVM is built in shared library mode, we can't
    # do C++ linking against re-exported libraries, so we have to link
    # against the parts that the test uses of the MLIR API explicitly.
    # There are various ways to solve this layering problem, but none
    # of them are very nice. So long as this is the only in-tree example,
    # it should be ok.
    target_link_libraries(iree_compiler_API2_test_api-test-binary
      PRIVATE MLIRCAPIIR
    )
  endif()
endif()
